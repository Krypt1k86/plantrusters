{"version":3,"file":"static/webpack/static/development/pages/finances.js.59657b6941a3e2828802.hot-update.js","sources":["webpack:///./pages/finances.tsx"],"sourcesContent":["import { NextPage } from 'next'\nimport { ethers, Contract } from 'ethers'\nimport Head from 'next/head'\nimport axios from 'axios'\n\nconst API_KEY = 'X3SIP83C2DJ8VRBYIF9NSUKRBRGHI6DX22'\nconst DAO = '0xf739c4d15854cab9874e24a4d1ec084dcaf1f13f'\n\nlet FINANCES_ENDPOINT = `http://api.etherscan.io/api?module=account&action=tokentx&address=${DAO}&startblock=8972891&endblock=latest&sort=asc&apikey=${API_KEY}`\n\nconst provider = new ethers.providers.EtherscanProvider('mainnet', API_KEY)\n\n// prettier-ignore\nconst financeContractABI = [{\"constant\":true,\"inputs\":[],\"name\":\"proxyType\",\"outputs\":[{\"name\":\"proxyTypeId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDepositable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"},{\"name\":\"_appId\",\"type\":\"bytes32\"},{\"name\":\"_initializePayload\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ProxyDeposit\",\"type\":\"event\"}]\n\nlet financeAddress = '0xf739C4d15854CaB9874E24a4D1Ec084DCAF1F13F'\n\nlet financeContract = new ethers.Contract(\n    financeAddress,\n    financeContractABI,\n    new ethers.providers.JsonRpcProvider()\n)\n\ninterface Transfer {\n    time: string\n    amount: string\n    reference: string\n    address: string\n}\n\ninterface ParsedTransfer {\n    time: string\n    amount: string\n    hash: string\n}\n\ninterface InputData {\n    reference: string\n    fromAddress: string\n}\n\nconst getFinanceTransactions = async (\n    transactionHash: string\n): Promise<InputData> => {\n    let tx = await provider.getTransaction(transactionHash)\n\n    //Function: deposit(address _token, uint256 _amount, string _reference)\n    let abi = ['deposit(address _token, uint256 _amount, string _reference)']\n\n    let iface = new ethers.utils.Interface(abi)\n\n    const transaction = iface.parseTransaction(tx)\n\n    const referenceString = transaction.args[2]\n\n    const inputData: InputData = {\n        reference: referenceString,\n        fromAddress: tx.from\n    }\n\n    return inputData\n}\n\nconst getFinances = async () => {\n    let transfers: Transfer[] = []\n\n    const result = await axios.get(FINANCES_ENDPOINT)\n\n    const data = result.data.result\n\n    // Don't show transfers from DAO, only incomming\n    const filtered = data.filter(function(log: any) {\n        return log.from !== DAO\n    })\n\n    const parsedTransfers: ParsedTransfer[] = filtered.map(function(log: any) {\n        var date = new Date(log.timeStamp * 1000)\n        var dateString = date.toLocaleDateString()\n\n        let wei = ethers.utils.bigNumberify(log.value)\n        const amount = ethers.utils.formatEther(wei) + ' ' + log.tokenSymbol\n\n        const transactionHash = log.hash\n\n        const parsed: ParsedTransfer = {\n            time: dateString,\n            amount: amount,\n            hash: transactionHash\n        }\n\n        return parsed\n    })\n\n    for (let parsed of parsedTransfers) {\n        let inputData = await getFinanceTransactions(parsed.hash)\n\n        const transfer: Transfer = {\n            time: parsed.time,\n            amount: parsed.amount,\n            reference: inputData.reference,\n            address: inputData.fromAddress\n        }\n\n        transfers.push(transfer)\n    }\n\n    return transfers\n}\n\nconst Finances: NextPage<{ finances: Transfer[] }> = ({ finances }) => {\n    const listItems = finances.map(finance => (\n        <li key={finance.address}>\n            {finance.time} -- {finance.address} -- {finance.amount}\n            {finance.reference}\n        </li>\n    ))\n\n    return (\n        <div>\n            <Head>\n                <title>Finances</title>\n                <meta\n                    name=\"viewport\"\n                    content=\"initial-scale=1.0, width=device-width\"\n                />\n            </Head>\n            <h1>DAO FINANCES</h1>\n            <ul>{listItems}</ul>\n        </div>\n    )\n}\n\nFinances.getInitialProps = async ({ req }) => {\n    const finances = await getFinances()\n\n    return { finances }\n}\n\nexport default Finances\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAFA;AAdA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AA5BA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AA6BA;AA9BA;AAAA;AACA;AADA;AA+BA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAzCA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AA6CA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAGA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAKA;;;;A","sourceRoot":""}