{"ast":null,"code":"var _jsxFileName = \"/Users/davidhovey/SaintFame/saintfame/pages/finances.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { ethers } from 'ethers';\nimport Head from 'next/head';\nimport axios from 'axios';\nconst API_KEY = 'X3SIP83C2DJ8VRBYIF9NSUKRBRGHI6DX22';\nconst DAO = '0xf739c4d15854cab9874e24a4d1ec084dcaf1f13f';\nlet FINANCES_ENDPOINT = `http://api.etherscan.io/api?module=account&action=tokentx&address=${DAO}&startblock=8972891&endblock=latest&sort=asc&apikey=${API_KEY}`;\nconst provider = new ethers.providers.EtherscanProvider('mainnet', API_KEY); // prettier-ignore\n\nconst financeContractABI = [{\n  \"constant\": true,\n  \"inputs\": [],\n  \"name\": \"proxyType\",\n  \"outputs\": [{\n    \"name\": \"proxyTypeId\",\n    \"type\": \"uint256\"\n  }],\n  \"payable\": false,\n  \"stateMutability\": \"pure\",\n  \"type\": \"function\"\n}, {\n  \"constant\": true,\n  \"inputs\": [],\n  \"name\": \"isDepositable\",\n  \"outputs\": [{\n    \"name\": \"\",\n    \"type\": \"bool\"\n  }],\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"constant\": true,\n  \"inputs\": [],\n  \"name\": \"implementation\",\n  \"outputs\": [{\n    \"name\": \"\",\n    \"type\": \"address\"\n  }],\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"constant\": true,\n  \"inputs\": [],\n  \"name\": \"appId\",\n  \"outputs\": [{\n    \"name\": \"\",\n    \"type\": \"bytes32\"\n  }],\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"constant\": true,\n  \"inputs\": [],\n  \"name\": \"kernel\",\n  \"outputs\": [{\n    \"name\": \"\",\n    \"type\": \"address\"\n  }],\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"name\": \"_kernel\",\n    \"type\": \"address\"\n  }, {\n    \"name\": \"_appId\",\n    \"type\": \"bytes32\"\n  }, {\n    \"name\": \"_initializePayload\",\n    \"type\": \"bytes\"\n  }],\n  \"payable\": false,\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"constructor\"\n}, {\n  \"payable\": true,\n  \"stateMutability\": \"payable\",\n  \"type\": \"fallback\"\n}, {\n  \"anonymous\": false,\n  \"inputs\": [{\n    \"indexed\": false,\n    \"name\": \"sender\",\n    \"type\": \"address\"\n  }, {\n    \"indexed\": false,\n    \"name\": \"value\",\n    \"type\": \"uint256\"\n  }],\n  \"name\": \"ProxyDeposit\",\n  \"type\": \"event\"\n}];\nlet financeAddress = '0xf739C4d15854CaB9874E24a4D1Ec084DCAF1F13F';\nlet financeContract = new ethers.Contract(financeAddress, financeContractABI, new ethers.providers.JsonRpcProvider());\n\nconst getFinanceTransactions = async transactionHash => {\n  let tx = await provider.getTransaction(transactionHash); //Function: deposit(address _token, uint256 _amount, string _reference)\n\n  let abi = ['deposit(address _token, uint256 _amount, string _reference)'];\n  let iface = new ethers.utils.Interface(abi);\n  const transaction = iface.parseTransaction(tx);\n  const referenceString = transaction.args[2];\n  const inputData = {\n    reference: referenceString,\n    fromAddress: tx.from\n  };\n  return inputData;\n};\n\nconst getFinances = async () => {\n  let transfers = [];\n  const result = await axios.get(FINANCES_ENDPOINT);\n  const data = result.data.result; // Don't show transfers from DAO, only incomming\n\n  const filtered = data.filter(function (log) {\n    return log.from !== DAO;\n  });\n  const parsedTransfers = filtered.map(function (log) {\n    var date = new Date(log.timeStamp * 1000);\n    var dateString = date.toLocaleDateString();\n    let wei = ethers.utils.bigNumberify(log.value);\n    const amount = ethers.utils.formatEther(wei) + ' ' + log.tokenSymbol;\n    const transactionHash = log.hash;\n    const parsed = {\n      time: dateString,\n      amount: amount,\n      hash: transactionHash\n    };\n    return parsed;\n  });\n\n  for (let parsed of parsedTransfers) {\n    let inputData = await getFinanceTransactions(parsed.hash);\n    const transfer = {\n      time: parsed.time,\n      amount: parsed.amount,\n      reference: inputData.reference,\n      address: inputData.fromAddress\n    };\n    transfers.push(transfer);\n  }\n\n  return transfers;\n};\n\nconst Finances = ({\n  finances\n}) => {\n  const listItems = finances.map(finance => __jsx(\"li\", {\n    key: finance.address,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, finance.time, \" \", finance.address, \" \", finance.amount, ' ', finance.reference));\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \"Finances\"), __jsx(\"meta\", {\n    name: \"viewport\",\n    content: \"initial-scale=1.0, width=device-width\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  })), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, \"$AINT TOKEN HOLDERS\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, listItems));\n};\n\nFinances.getInitialProps = async ({\n  req\n}) => {\n  const finances = await getFinances();\n  return {\n    finances\n  };\n};\n\nexport default Finances;","map":{"version":3,"sources":["/Users/davidhovey/SaintFame/saintfame/pages/finances.tsx"],"names":["ethers","Head","axios","API_KEY","DAO","FINANCES_ENDPOINT","provider","providers","EtherscanProvider","financeContractABI","financeAddress","financeContract","Contract","JsonRpcProvider","getFinanceTransactions","transactionHash","tx","getTransaction","abi","iface","utils","Interface","transaction","parseTransaction","referenceString","args","inputData","reference","fromAddress","from","getFinances","transfers","result","get","data","filtered","filter","log","parsedTransfers","map","date","Date","timeStamp","dateString","toLocaleDateString","wei","bigNumberify","value","amount","formatEther","tokenSymbol","hash","parsed","time","transfer","address","push","Finances","finances","listItems","finance","getInitialProps","req"],"mappings":"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","sourcesContent":["import { NextPage } from 'next'\nimport { ethers, Contract } from 'ethers'\nimport Head from 'next/head'\nimport axios from 'axios'\n\nconst API_KEY = 'X3SIP83C2DJ8VRBYIF9NSUKRBRGHI6DX22'\nconst DAO = '0xf739c4d15854cab9874e24a4d1ec084dcaf1f13f'\n\nlet FINANCES_ENDPOINT = `http://api.etherscan.io/api?module=account&action=tokentx&address=${DAO}&startblock=8972891&endblock=latest&sort=asc&apikey=${API_KEY}`\n\nconst provider = new ethers.providers.EtherscanProvider('mainnet', API_KEY)\n\n// prettier-ignore\nconst financeContractABI = [{\"constant\":true,\"inputs\":[],\"name\":\"proxyType\",\"outputs\":[{\"name\":\"proxyTypeId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDepositable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"},{\"name\":\"_appId\",\"type\":\"bytes32\"},{\"name\":\"_initializePayload\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ProxyDeposit\",\"type\":\"event\"}]\n\nlet financeAddress = '0xf739C4d15854CaB9874E24a4D1Ec084DCAF1F13F'\n\nlet financeContract = new ethers.Contract(\n    financeAddress,\n    financeContractABI,\n    new ethers.providers.JsonRpcProvider()\n)\n\ninterface Transfer {\n    time: string\n    amount: string\n    reference: string\n    address: string\n}\n\ninterface ParsedTransfer {\n    time: string\n    amount: string\n    hash: string\n}\n\ninterface InputData {\n    reference: string\n    fromAddress: string\n}\n\nconst getFinanceTransactions = async (\n    transactionHash: string\n): Promise<InputData> => {\n    let tx = await provider.getTransaction(transactionHash)\n\n    //Function: deposit(address _token, uint256 _amount, string _reference)\n    let abi = ['deposit(address _token, uint256 _amount, string _reference)']\n\n    let iface = new ethers.utils.Interface(abi)\n\n    const transaction = iface.parseTransaction(tx)\n\n    const referenceString = transaction.args[2]\n\n    const inputData: InputData = {\n        reference: referenceString,\n        fromAddress: tx.from\n    }\n\n    return inputData\n}\n\nconst getFinances = async () => {\n    let transfers: Transfer[] = []\n\n    const result = await axios.get(FINANCES_ENDPOINT)\n\n    const data = result.data.result\n\n    // Don't show transfers from DAO, only incomming\n    const filtered = data.filter(function(log: any) {\n        return log.from !== DAO\n    })\n\n    const parsedTransfers: ParsedTransfer[] = filtered.map(function(log: any) {\n        var date = new Date(log.timeStamp * 1000)\n        var dateString = date.toLocaleDateString()\n\n        let wei = ethers.utils.bigNumberify(log.value)\n        const amount = ethers.utils.formatEther(wei) + ' ' + log.tokenSymbol\n\n        const transactionHash = log.hash\n\n        const parsed: ParsedTransfer = {\n            time: dateString,\n            amount: amount,\n            hash: transactionHash\n        }\n\n        return parsed\n    })\n\n    for (let parsed of parsedTransfers) {\n        let inputData = await getFinanceTransactions(parsed.hash)\n\n        const transfer: Transfer = {\n            time: parsed.time,\n            amount: parsed.amount,\n            reference: inputData.reference,\n            address: inputData.fromAddress\n        }\n\n        transfers.push(transfer)\n    }\n\n    return transfers\n}\n\nconst Finances: NextPage<{ finances: Transfer[] }> = ({ finances }) => {\n    const listItems = finances.map(finance => (\n        <li key={finance.address}>\n            {finance.time} {finance.address} {finance.amount}{' '}\n            {finance.reference}\n        </li>\n    ))\n\n    return (\n        <div>\n            <Head>\n                <title>Finances</title>\n                <meta\n                    name=\"viewport\"\n                    content=\"initial-scale=1.0, width=device-width\"\n                />\n            </Head>\n            <h1>$AINT TOKEN HOLDERS</h1>\n            <ul>{listItems}</ul>\n        </div>\n    )\n}\n\nFinances.getInitialProps = async ({ req }) => {\n    const finances = await getFinances()\n\n    return { finances }\n}\n\nexport default Finances\n"]},"metadata":{},"sourceType":"module"}