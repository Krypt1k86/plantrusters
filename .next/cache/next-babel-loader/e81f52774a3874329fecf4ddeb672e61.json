{"ast":null,"code":"import _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/davidhovey/SaintFame/saintfame/pages/finances.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { ethers } from 'ethers';\nimport Head from 'next/head';\nimport axios from 'axios';\nvar API_KEY = 'X3SIP83C2DJ8VRBYIF9NSUKRBRGHI6DX22';\nvar DAO = '0xf739c4d15854cab9874e24a4d1ec084dcaf1f13f';\nvar FINANCES_ENDPOINT = \"http://api.etherscan.io/api?module=account&action=tokentx&address=\".concat(DAO, \"&startblock=8972891&endblock=latest&sort=asc&apikey=\").concat(API_KEY);\nvar provider = new ethers.providers.EtherscanProvider('mainnet', API_KEY); // prettier-ignore\n\nvar financeContractABI = [{\n  \"constant\": true,\n  \"inputs\": [],\n  \"name\": \"proxyType\",\n  \"outputs\": [{\n    \"name\": \"proxyTypeId\",\n    \"type\": \"uint256\"\n  }],\n  \"payable\": false,\n  \"stateMutability\": \"pure\",\n  \"type\": \"function\"\n}, {\n  \"constant\": true,\n  \"inputs\": [],\n  \"name\": \"isDepositable\",\n  \"outputs\": [{\n    \"name\": \"\",\n    \"type\": \"bool\"\n  }],\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"constant\": true,\n  \"inputs\": [],\n  \"name\": \"implementation\",\n  \"outputs\": [{\n    \"name\": \"\",\n    \"type\": \"address\"\n  }],\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"constant\": true,\n  \"inputs\": [],\n  \"name\": \"appId\",\n  \"outputs\": [{\n    \"name\": \"\",\n    \"type\": \"bytes32\"\n  }],\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"constant\": true,\n  \"inputs\": [],\n  \"name\": \"kernel\",\n  \"outputs\": [{\n    \"name\": \"\",\n    \"type\": \"address\"\n  }],\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"name\": \"_kernel\",\n    \"type\": \"address\"\n  }, {\n    \"name\": \"_appId\",\n    \"type\": \"bytes32\"\n  }, {\n    \"name\": \"_initializePayload\",\n    \"type\": \"bytes\"\n  }],\n  \"payable\": false,\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"constructor\"\n}, {\n  \"payable\": true,\n  \"stateMutability\": \"payable\",\n  \"type\": \"fallback\"\n}, {\n  \"anonymous\": false,\n  \"inputs\": [{\n    \"indexed\": false,\n    \"name\": \"sender\",\n    \"type\": \"address\"\n  }, {\n    \"indexed\": false,\n    \"name\": \"value\",\n    \"type\": \"uint256\"\n  }],\n  \"name\": \"ProxyDeposit\",\n  \"type\": \"event\"\n}];\nvar financeAddress = '0xf739C4d15854CaB9874E24a4D1Ec084DCAF1F13F';\nvar financeContract = new ethers.Contract(financeAddress, financeContractABI, new ethers.providers.JsonRpcProvider());\n\nvar getFinanceTransactions =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(transactionHash) {\n    var tx, abi, iface, transaction, referenceString, inputData;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return provider.getTransaction(transactionHash);\n\n          case 2:\n            tx = _context.sent;\n            //Function: deposit(address _token, uint256 _amount, string _reference)\n            abi = ['deposit(address _token, uint256 _amount, string _reference)'];\n            iface = new ethers.utils.Interface(abi);\n            transaction = iface.parseTransaction(tx);\n            referenceString = transaction.args[2];\n            inputData = {\n              reference: referenceString,\n              fromAddress: tx.from\n            };\n            return _context.abrupt(\"return\", inputData);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getFinanceTransactions(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar getFinances =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var transfers, result, data, filtered, parsedTransfers, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, parsed, inputData, transfer;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            transfers = [];\n            _context2.next = 3;\n            return axios.get(FINANCES_ENDPOINT);\n\n          case 3:\n            result = _context2.sent;\n            data = result.data.result; // Don't show transfers from DAO, only incomming\n\n            filtered = data.filter(function (log) {\n              return log.from !== DAO;\n            });\n            parsedTransfers = filtered.map(function (log) {\n              var date = new Date(log.timeStamp * 1000);\n              var dateString = date.toLocaleDateString();\n              var wei = ethers.utils.bigNumberify(log.value);\n              var amount = ethers.utils.formatEther(wei) + ' ' + log.tokenSymbol;\n              var transactionHash = log.hash;\n              var parsed = {\n                time: dateString,\n                amount: amount,\n                hash: transactionHash\n              };\n              return parsed;\n            });\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _iteratorError = undefined;\n            _context2.prev = 10;\n            _iterator = _getIterator(parsedTransfers);\n\n          case 12:\n            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n              _context2.next = 22;\n              break;\n            }\n\n            parsed = _step.value;\n            _context2.next = 16;\n            return getFinanceTransactions(parsed.hash);\n\n          case 16:\n            inputData = _context2.sent;\n            transfer = {\n              time: parsed.time,\n              amount: parsed.amount,\n              reference: inputData.reference,\n              address: inputData.fromAddress\n            };\n            transfers.push(transfer);\n\n          case 19:\n            _iteratorNormalCompletion = true;\n            _context2.next = 12;\n            break;\n\n          case 22:\n            _context2.next = 28;\n            break;\n\n          case 24:\n            _context2.prev = 24;\n            _context2.t0 = _context2[\"catch\"](10);\n            _didIteratorError = true;\n            _iteratorError = _context2.t0;\n\n          case 28:\n            _context2.prev = 28;\n            _context2.prev = 29;\n\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n\n          case 31:\n            _context2.prev = 31;\n\n            if (!_didIteratorError) {\n              _context2.next = 34;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 34:\n            return _context2.finish(31);\n\n          case 35:\n            return _context2.finish(28);\n\n          case 36:\n            return _context2.abrupt(\"return\", transfers);\n\n          case 37:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[10, 24, 28, 36], [29,, 31, 35]]);\n  }));\n\n  return function getFinances() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar Finances = function Finances(_ref3) {\n  var finances = _ref3.finances;\n  var listItems = finances.map(function (finance) {\n    return __jsx(\"li\", {\n      key: finance.address,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, finance.time, \" -- \", finance.address, \" \", finance.amount, finance.reference);\n  });\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \"Finances\"), __jsx(\"meta\", {\n    name: \"viewport\",\n    content: \"initial-scale=1.0, width=device-width\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  })), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, \"DAO FINANCES\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, listItems));\n};\n\nFinances.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(_ref4) {\n    var req, finances;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            req = _ref4.req;\n            _context3.next = 3;\n            return getFinances();\n\n          case 3:\n            finances = _context3.sent;\n            return _context3.abrupt(\"return\", {\n              finances: finances\n            });\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x2) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nexport default Finances;","map":{"version":3,"sources":["/Users/davidhovey/SaintFame/saintfame/pages/finances.tsx"],"names":["ethers","Head","axios","API_KEY","DAO","FINANCES_ENDPOINT","provider","providers","EtherscanProvider","financeContractABI","financeAddress","financeContract","Contract","JsonRpcProvider","getFinanceTransactions","transactionHash","getTransaction","tx","abi","iface","utils","Interface","transaction","parseTransaction","referenceString","args","inputData","reference","fromAddress","from","getFinances","transfers","get","result","data","filtered","filter","log","parsedTransfers","map","date","Date","timeStamp","dateString","toLocaleDateString","wei","bigNumberify","value","amount","formatEther","tokenSymbol","hash","parsed","time","transfer","address","push","Finances","finances","listItems","finance","getInitialProps","req"],"mappings":"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","sourcesContent":["import { NextPage } from 'next'\nimport { ethers, Contract } from 'ethers'\nimport Head from 'next/head'\nimport axios from 'axios'\n\nconst API_KEY = 'X3SIP83C2DJ8VRBYIF9NSUKRBRGHI6DX22'\nconst DAO = '0xf739c4d15854cab9874e24a4d1ec084dcaf1f13f'\n\nlet FINANCES_ENDPOINT = `http://api.etherscan.io/api?module=account&action=tokentx&address=${DAO}&startblock=8972891&endblock=latest&sort=asc&apikey=${API_KEY}`\n\nconst provider = new ethers.providers.EtherscanProvider('mainnet', API_KEY)\n\n// prettier-ignore\nconst financeContractABI = [{\"constant\":true,\"inputs\":[],\"name\":\"proxyType\",\"outputs\":[{\"name\":\"proxyTypeId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDepositable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"},{\"name\":\"_appId\",\"type\":\"bytes32\"},{\"name\":\"_initializePayload\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ProxyDeposit\",\"type\":\"event\"}]\n\nlet financeAddress = '0xf739C4d15854CaB9874E24a4D1Ec084DCAF1F13F'\n\nlet financeContract = new ethers.Contract(\n    financeAddress,\n    financeContractABI,\n    new ethers.providers.JsonRpcProvider()\n)\n\ninterface Transfer {\n    time: string\n    amount: string\n    reference: string\n    address: string\n}\n\ninterface ParsedTransfer {\n    time: string\n    amount: string\n    hash: string\n}\n\ninterface InputData {\n    reference: string\n    fromAddress: string\n}\n\nconst getFinanceTransactions = async (\n    transactionHash: string\n): Promise<InputData> => {\n    let tx = await provider.getTransaction(transactionHash)\n\n    //Function: deposit(address _token, uint256 _amount, string _reference)\n    let abi = ['deposit(address _token, uint256 _amount, string _reference)']\n\n    let iface = new ethers.utils.Interface(abi)\n\n    const transaction = iface.parseTransaction(tx)\n\n    const referenceString = transaction.args[2]\n\n    const inputData: InputData = {\n        reference: referenceString,\n        fromAddress: tx.from\n    }\n\n    return inputData\n}\n\nconst getFinances = async () => {\n    let transfers: Transfer[] = []\n\n    const result = await axios.get(FINANCES_ENDPOINT)\n\n    const data = result.data.result\n\n    // Don't show transfers from DAO, only incomming\n    const filtered = data.filter(function(log: any) {\n        return log.from !== DAO\n    })\n\n    const parsedTransfers: ParsedTransfer[] = filtered.map(function(log: any) {\n        var date = new Date(log.timeStamp * 1000)\n        var dateString = date.toLocaleDateString()\n\n        let wei = ethers.utils.bigNumberify(log.value)\n        const amount = ethers.utils.formatEther(wei) + ' ' + log.tokenSymbol\n\n        const transactionHash = log.hash\n\n        const parsed: ParsedTransfer = {\n            time: dateString,\n            amount: amount,\n            hash: transactionHash\n        }\n\n        return parsed\n    })\n\n    for (let parsed of parsedTransfers) {\n        let inputData = await getFinanceTransactions(parsed.hash)\n\n        const transfer: Transfer = {\n            time: parsed.time,\n            amount: parsed.amount,\n            reference: inputData.reference,\n            address: inputData.fromAddress\n        }\n\n        transfers.push(transfer)\n    }\n\n    return transfers\n}\n\nconst Finances: NextPage<{ finances: Transfer[] }> = ({ finances }) => {\n    const listItems = finances.map(finance => (\n        <li key={finance.address}>\n            {finance.time} -- {finance.address} {finance.amount}\n            {finance.reference}\n        </li>\n    ))\n\n    return (\n        <div>\n            <Head>\n                <title>Finances</title>\n                <meta\n                    name=\"viewport\"\n                    content=\"initial-scale=1.0, width=device-width\"\n                />\n            </Head>\n            <h1>DAO FINANCES</h1>\n            <ul>{listItems}</ul>\n        </div>\n    )\n}\n\nFinances.getInitialProps = async ({ req }) => {\n    const finances = await getFinances()\n\n    return { finances }\n}\n\nexport default Finances\n"]},"metadata":{},"sourceType":"module"}