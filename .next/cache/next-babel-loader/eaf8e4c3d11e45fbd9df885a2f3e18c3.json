{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar _jsxFileName = \"/Users/davidhovey/SaintFame/Site/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { ethers } from 'ethers';\n\nfunction parseLogs(logs) {\n  let iface = new ethers.utils.Interface(new CardsFactory().interface.abi);\n  return logs.map(log => iface.parseLog(log)).map(item => {\n    let result = {\n      name: item.name,\n      signature: item.signature,\n      values: {}\n    };\n\n    const keys = _Object$keys(item.values);\n\n    const values = _Object$values(item.values);\n\n    const start = item.values.length;\n\n    for (let i = start; i < start * 2 - 1; i++) {\n      result.values[keys[i]] = values[i];\n    }\n\n    return result;\n  });\n}\n\nconst test = async () => {\n  const provider = new ethers.providers.JsonRpcProvider('https://mainnet.infura.io/v3/ab962fb32dfc49a8ab6ab72a6a318c85');\n  let contractAddress = \"0xD275B1550E8ca8Da84c552ACa9313Ec4a5B9bD07\";\n  let topic = ethers.utils.id(\"transferFrom(address,address)\");\n  let filter = {\n    address: contractAddress,\n    fromBlock: 8960961,\n    toBlock: \"latest\",\n    topics: [topic]\n  };\n  provider.getLogs(filter).then(result => {\n    console.log(\"result \", result);\n\n    for (let entry of result) {\n      console.log(\"entry \", entry);\n    }\n  });\n};\n\nconst Home = ({\n  userAgent\n}) => {\n  test();\n  return __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Hello world! - user agent: \", userAgent);\n};\n\nHome.getInitialProps = async ({\n  req\n}) => {\n  const userAgent = req ? req.headers['user-agent'] || '' : navigator.userAgent;\n  return {\n    userAgent\n  };\n};\n\nexport default Home; // 7BB81632c66cfAf0c9c7aA2DBaBf21FBC036D013\n// \"0x0000000000000000000000007bb81632c66cfaf0c9c7aa2dbabf21fbc036d013\"\n\nentry;","map":{"version":3,"sources":["/Users/davidhovey/SaintFame/Site/pages/index.tsx"],"names":["ethers","parseLogs","logs","iface","utils","Interface","CardsFactory","interface","abi","map","log","parseLog","item","result","name","signature","values","keys","start","length","i","test","provider","providers","JsonRpcProvider","contractAddress","topic","id","filter","address","fromBlock","toBlock","topics","getLogs","then","console","entry","Home","userAgent","getInitialProps","req","headers","navigator"],"mappings":";;;;;AACA,SAASA,MAAT,QAAuB,QAAvB;;AAEA,SAASC,SAAT,CAAmBC,IAAnB,EAAwD;AACtD,MAAIC,KAAK,GAAG,IAAIH,MAAM,CAACI,KAAP,CAAaC,SAAjB,CAA2B,IAAIC,YAAJ,GAAmBC,SAAnB,CAA6BC,GAAxD,CAAZ;AACA,SAAON,IAAI,CAACO,GAAL,CAAUC,GAAD,IAASP,KAAK,CAACQ,QAAN,CAAeD,GAAf,CAAlB,EAAuCD,GAAvC,CAA2CG,IAAI,IAAI;AACtD,QAAIC,MAAM,GAAG;AACTC,MAAAA,IAAI,EAAEF,IAAI,CAACE,IADF;AAETC,MAAAA,SAAS,EAAEH,IAAI,CAACG,SAFP;AAGTC,MAAAA,MAAM,EAAE;AAHC,KAAb;;AAMA,UAAMC,IAAI,GAAG,aAAYL,IAAI,CAACI,MAAjB,CAAb;;AACA,UAAMA,MAAM,GAAG,eAAcJ,IAAI,CAACI,MAAnB,CAAf;;AACA,UAAME,KAAK,GAAGN,IAAI,CAACI,MAAL,CAAYG,MAA1B;;AAEA,SAAK,IAAIC,CAAC,GAAGF,KAAb,EAAoBE,CAAC,GAAIF,KAAK,GAAG,CAAT,GAAc,CAAtC,EAAyCE,CAAC,EAA1C,EAA8C;AAC1CP,MAAAA,MAAM,CAACG,MAAP,CAAcC,IAAI,CAACG,CAAD,CAAlB,IAAyBJ,MAAM,CAACI,CAAD,CAA/B;AACH;;AAED,WAAOP,MAAP;AACH,GAhBM,CAAP;AAiBD;;AAED,MAAMQ,IAAI,GAAG,YAAY;AAEzB,QAAMC,QAAQ,GAAG,IAAItB,MAAM,CAACuB,SAAP,CAAiBC,eAArB,CAAqC,+DAArC,CAAjB;AAEA,MAAIC,eAAe,GAAG,4CAAtB;AAEA,MAAIC,KAAK,GAAG1B,MAAM,CAACI,KAAP,CAAauB,EAAb,CAAgB,+BAAhB,CAAZ;AAEA,MAAIC,MAAM,GAAG;AACTC,IAAAA,OAAO,EAAEJ,eADA;AAETK,IAAAA,SAAS,EAAE,OAFF;AAGTC,IAAAA,OAAO,EAAE,QAHA;AAITC,IAAAA,MAAM,EAAE,CAAEN,KAAF;AAJC,GAAb;AAOAJ,EAAAA,QAAQ,CAACW,OAAT,CAAiBL,MAAjB,EAAyBM,IAAzB,CAA+BrB,MAAD,IAAY;AACtCsB,IAAAA,OAAO,CAACzB,GAAR,CAAY,SAAZ,EAAuBG,MAAvB;;AAEA,SAAK,IAAIuB,KAAT,IAAkBvB,MAAlB,EAA0B;AAExBsB,MAAAA,OAAO,CAACzB,GAAR,CAAY,QAAZ,EAAsB0B,KAAtB;AACH;AACF,GAPD;AAQC,CAvBD;;AAyBA,MAAMC,IAAqC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAC/DjB,EAAAA,IAAI;AACJ,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAAgCiB,SAAhC,CADF;AAGD,CALD;;AAOAD,IAAI,CAACE,eAAL,GAAuB,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAmB;AACxC,QAAMF,SAAS,GAAGE,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAY,YAAZ,KAA6B,EAAhC,GAAqCC,SAAS,CAACJ,SAApE;AACA,SAAO;AAAEA,IAAAA;AAAF,GAAP;AACD,CAHD;;AAKA,eAAeD,IAAf,C,CAEA;AACA;;AAEAD,KAAK","sourcesContent":["import { NextPage } from 'next';\nimport { ethers } from 'ethers';\n\nfunction parseLogs(logs: ethers.providers.Log[]): any[] {\n  let iface = new ethers.utils.Interface(new CardsFactory().interface.abi);\n  return logs.map((log) => iface.parseLog(log)).map(item => {\n      let result = {\n          name: item.name,\n          signature: item.signature,\n          values: {}\n      };\n\n      const keys = Object.keys(item.values);\n      const values = Object.values(item.values);\n      const start = item.values.length;\n\n      for (let i = start; i < (start * 2) - 1; i++) {\n          result.values[keys[i]] = values[i];\n      }\n\n      return result;\n  });\n}\n\nconst test = async () => {\n\nconst provider = new ethers.providers.JsonRpcProvider('https://mainnet.infura.io/v3/ab962fb32dfc49a8ab6ab72a6a318c85')\n\nlet contractAddress = \"0xD275B1550E8ca8Da84c552ACa9313Ec4a5B9bD07\";\n\nlet topic = ethers.utils.id(\"transferFrom(address,address)\");\n\nlet filter = {\n    address: contractAddress,\n    fromBlock: 8960961,\n    toBlock: \"latest\",\n    topics: [ topic ]\n}\n\nprovider.getLogs(filter).then((result) => {\n    console.log(\"result \", result);\n\n    for (let entry of result) {\n      \n      console.log(\"entry \", entry)\n  }\n});\n}\n\nconst Home: NextPage<{ userAgent: string }> = ({ userAgent }) => {\n  test()\n  return (\n    <h1>Hello world! - user agent: {userAgent}</h1>\n  )\n};\n\nHome.getInitialProps = async ({ req }) => {\n  const userAgent = req ? req.headers['user-agent'] || '' : navigator.userAgent;\n  return { userAgent };\n};\n\nexport default Home;\n\n// 7BB81632c66cfAf0c9c7aA2DBaBf21FBC036D013\n// \"0x0000000000000000000000007bb81632c66cfaf0c9c7aa2dbabf21fbc036d013\"\n\nentry"]},"metadata":{},"sourceType":"module"}